# 构建阶段
FROM node:18-alpine AS builder
WORKDIR /app

# 复制 package.json 和 package-lock.json
COPY frontend/package*.json ./

# 安装依赖 (使用npm install替代npm ci以提高在网络不稳定情况下的成功率)
# 添加重试机制和超时设置
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm install && \
    npm cache clean --force

# 复制源代码
COPY frontend/ ./

# 设置环境变量并构建 - 使用standalone输出模式
ENV NEXT_PUBLIC_API_URL=http://backend:8000
RUN cp next.config.js next.config.original.js && \
    echo "const originalConfig = require('./next.config.original.js'); module.exports = { ...originalConfig, output: 'standalone' };" > next.config.js && \
    npm run build

# 生产阶段
FROM node:18-alpine AS runner
WORKDIR /app

# 设置环境变量
ENV NODE_ENV production
ENV NEXT_PUBLIC_API_URL=http://backend:8000

# 只复制必要的文件 - 使用standalone输出的优势
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
# 确保rewrites配置正常工作
COPY --from=builder /app/next.config.js ./next.config.js

# 删除不必要的文件和目录
RUN find . -name "*.map" -delete && \
    rm -rf /tmp/* && \
    rm -rf /root/.npm && \
    rm -rf /root/.node-gyp

EXPOSE 3000
# 使用Node直接运行服务器，而不是通过npm
CMD ["node", "server.js"]